/* eslint-disable @typescript-eslint/no-unsafe-member-access */
import { type ShoppingItem } from "@prisma/client";
import Head from "next/head";
import { useState } from "react";
import ItemModel from "~/components/ItemModel";
import { SlTrash } from "react-icons/sl";
import { api } from "~/utils/api";
import { motion } from "framer-motion";

export default function Home() {
  const [items, setItems] = useState<ShoppingItem[]>([]);
  const [checkedItems, setCheckedItems] = useState<ShoppingItem[]>([]);
  const [modelOpen, setModelOpen] = useState<boolean>(false);

  // GET ALL THE ITEMS

  const { data: itemsData, isLoading } = api.post.getAll.useQuery(undefined, {
    onSuccess(items) {
      if (items) {
        setItems && setItems(items);
      }
    },
  });

  // DELETE AN ITEM BY ID
  const { mutate: deleteItem } = api.post.deleteItem.useMutation({
    onSuccess(shoppingItem) {
      setItems((prev) => prev.filter((item) => item.id !== shoppingItem.id));
    },
  });

  //UPDATE FUNTION
  const { mutate: updateItem } = api.post.updateItem.useMutation({
    onSuccess(shoppingItem) {
      //check if this is already checked
      if (checkedItems.some((item) => item.id === shoppingItem.id)) {
        setCheckedItems((prev) =>
          //remove it from the checked items
          prev.filter((item) => item.id !== shoppingItem.id),
        );
      } else {
        //add it to the checked items
        setCheckedItems((prev) => [...prev, shoppingItem]);
      }
    },
  });

  if (!itemsData || isLoading) return <p> Loading...</p>;

  return (
    <>
      <Head>
        <title>Shopping List</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>

      {modelOpen && (
        <ItemModel setModelOpen={setModelOpen} setItems={setItems} />
      )}

      <main className="mx-auto my-12 max-w-3xl">
        <div className="flex justify-between">
          <h2 className="text-2xl font-semibold">My shopping list</h2>
          <button
            type="button"
            onClick={() => setModelOpen(true)}
            className="trasition rounded-md bg-violet-500 p-2 text-sm text-white hover:bg-violet-600"
          >
            Add Shopping item
          </button>
        </div>

        <ul className="mt-4">
          {items.map((item) => {
            const { id, name } = item;

            return (
              <li key={id} className="flex w-full items-center justify-between">
                <div className="relative">
                  <div className="pointer-events-none absolute inset-0 flex origin-left items-center justify-center">
                    <motion.div
                      initial={{ width: 0 }}
                      animate={{
                        width: checkedItems.some((item) => item.id === id)
                          ? "100%"
                          : 0,
                      }}
                      transition={{ duration: 0.2, ease: "easeInOut" }}
                      className="h-[2px] w-full translate-y-px bg-red-500"
                    />
                  </div>
                  <span
                    onClick={() =>
                      updateItem({
                        id,
                        checked: checkedItems.some((item) => item.id === id)
                          ? false
                          : true,
                      })
                    }
                  >
                    {name}
                  </span>
                </div>
                <SlTrash
                  onClick={() => {
                    deleteItem({ id });
                  }}
                  className="cursor-pointer text-lg text-red-500"
                />
              </li>
            );
          })}
        </ul>
      </main>
    </>
  );
}
